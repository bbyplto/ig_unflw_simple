import asyncio
import logging
import random
import time
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
import instaloader
import requests
from typing import List, Dict, Optional
import os
from dataclasses import dataclass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

@dataclass
class InstagramUser:
    username: str
    full_name: str
    followers_count: int
    profile_pic_url: str
    is_verified: bool
    is_private: bool

class InstagramAnalyzer:
    def __init__(self):
        self.loader = instaloader.Instaloader()
        self.last_request_time = 0
        self.request_delay = random.uniform(5, 10)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        self.loader.context.user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    
    async def wait_for_rate_limit(self):
        """–°–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
        current_time = time.time()
        time_since_last_request = current_time - self.last_request_time
        
        if time_since_last_request < self.request_delay:
            sleep_time = self.request_delay - time_since_last_request
            logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {sleep_time:.2f} —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤...")
            await asyncio.sleep(sleep_time)
        
        self.last_request_time = time.time()
        # –†–∞–Ω–¥–æ–º–∏–∑–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–µ—Ä–∂–∫—É (5-15 —Å–µ–∫—É–Ω–¥)
        self.request_delay = random.uniform(5, 15)
    
    async def get_profile_info(self, username: str) -> Optional[InstagramUser]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
        try:
            await self.wait_for_rate_limit()
            
            username = username.replace('@', '').replace('https://instagram.com/', '').replace('https://www.instagram.com/', '').strip('/')
            
            profile = instaloader.Profile.from_username(self.loader.context, username)
            
            return InstagramUser(
                username=profile.username,
                full_name=profile.full_name,
                followers_count=profile.followers,
                profile_pic_url=profile.profile_pic_url,
                is_verified=profile.is_verified,
                is_private=profile.is_private
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {username}: {e}")
            return None
    
    async def get_followers_and_following(self, username: str, max_count: int = 500) -> Dict[str, List[InstagramUser]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–æ–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
        try:
            username = username.replace('@', '').strip('/')
            
            await self.wait_for_rate_limit()
            profile = instaloader.Profile.from_username(self.loader.context, username)
            
            if profile.is_private:
                return {"error": "–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç—ã–π"}
            
            logger.info(f"–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è @{profile.username}")
            logger.info(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {profile.followers}, –ü–æ–¥–ø–∏—Å–æ–∫: {profile.followees}")
            
            followers = []
            following = []
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∏ –±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
            logger.info("–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...")
            count = 0
            try:
                for follower in profile.get_followers():
                    if count >= max_count:
                        break
                        
                    await self.wait_for_rate_limit()  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    
                    user_info = InstagramUser(
                        username=follower.username,
                        full_name=follower.full_name,
                        followers_count=follower.followers,
                        profile_pic_url=follower.profile_pic_url,
                        is_verified=follower.is_verified,
                        is_private=follower.is_private
                    )
                    followers.append(user_info)
                    count += 1
                    
                    if count % 10 == 0:
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {count}")
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        await asyncio.sleep(random.uniform(10, 20))
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
                if not followers:
                    return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {str(e)}"}
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∏ –±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
            logger.info("–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫...")
            count = 0
            try:
                for follow in profile.get_followees():
                    if count >= max_count:
                        break
                        
                    await self.wait_for_rate_limit()
                    
                    user_info = InstagramUser(
                        username=follow.username,
                        full_name=follow.full_name,
                        followers_count=follow.followers,
                        profile_pic_url=follow.profile_pic_url,
                        is_verified=follow.is_verified,
                        is_private=follow.is_private
                    )
                    following.append(user_info)
                    count += 1
                    
                    if count % 10 == 0:
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {count}")
                        await asyncio.sleep(random.uniform(10, 20))
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
                if not following:
                    return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}"}
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(followers)}, –ü–æ–¥–ø–∏—Å–æ–∫: {len(following)}")
            
            return {
                "followers": followers,
                "following": following
            }
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è {username}: {e}")
            return {"error": str(e)}
    
    def find_non_mutual(self, followers: List[InstagramUser], following: List[InstagramUser]) -> List[InstagramUser]:
        """–ü–æ–∏—Å–∫ –Ω–µ–≤–∑–∞–∏–º–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
        follower_usernames = {user.username.lower() for user in followers}
        
        non_mutual = []
        for user in following:
            if user.username.lower() not in follower_usernames:
                non_mutual.append(user)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞—Ç–µ–º –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏
        def sort_key(user):
            if user.followers_count < 1000:
                return (0, user.followers_count)  # –ú–∏–∫—Ä–æ-–±–ª–æ–≥–≥–µ—Ä—ã
            elif user.followers_count < 10000:
                return (1, user.followers_count)  # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            elif user.followers_count < 100000:
                return (2, user.followers_count)  # –°—Ä–µ–¥–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            else:
                return (3, user.followers_count)  # –ó–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏
        
        non_mutual.sort(key=sort_key)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ–≤–∑–∞–∏–º–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(non_mutual)}")
        return non_mutual

class TelegramBot:
    def __init__(self, token: str):
        self.token = token
        self.analyzer = InstagramAnalyzer()
        self.application = Application.builder().token(token).build()
        self.active_analyses = {}
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_message = """
ü§ñ **Instagram Analyzer Bot v2.0**

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω–µ–≤–∑–∞–∏–º–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Instagram.

**–ö–æ–º–∞–Ω–¥—ã:**
/analyze @username - –∞–Ω–∞–ª–∏–∑ –Ω–µ–≤–∑–∞–∏–º–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–¥–æ 500)
/profile @username - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
/status - —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞

**‚ö° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (5-15 —Å–µ–∫)
‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–æ 500 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤/–ø–æ–¥–ø–∏—Å–æ–∫
‚úÖ –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚úÖ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏
‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ –∫–Ω–æ–ø–∫–µ

**‚ö†Ô∏è –í–ê–ñ–ù–û:**
- –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω–∏–º–∞–µ—Ç 10-30 –º–∏–Ω—É—Ç
- –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
- –ù–µ –∑–∞–ø—É—Å–∫–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
- –ò—Å–ø–æ–ª—å–∑—É–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ (—Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Instagram)
        """
        
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
    
    async def analyze_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–∑–∞–∏–º–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ username: /analyze @username")
            return
        
        username = context.args[0]
        user_id = update.effective_user.id
        
        if user_id in self.active_analyses:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∞–Ω–∞–ª–∏–∑. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status")
            return
        
        self.active_analyses[user_id] = {"username": username, "start_time": datetime.now()}
        
        await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –∑–∞–π–º–µ—Ç 10-30 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è.")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
            profile = await self.analyzer.get_profile_info(username)
            if not profile:
                await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                del self.active_analyses[user_id]
                return
            
            if profile.is_private:
                await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç—ã–π. –ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
                del self.active_analyses[user_id]
                return
            
            await update.message.reply_text(f"""
üìä **–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑:**
üë§ –ü—Ä–æ—Ñ–∏–ª—å: @{profile.username} ({profile.full_name})
üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {profile.followers_count:,}
üì§ –ü–æ–¥–ø–∏—Å–æ–∫: –ó–∞–≥—Ä—É–∂–∞—é...
‚è∞ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {max(10, min(30, profile.followers_count // 100))} –º–∏–Ω—É—Ç

üîÑ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...
            """, parse_mode='Markdown')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            max_analysis = min(500, profile.followers_count // 2)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            data = await self.analyzer.get_followers_and_following(username, max_count=max_analysis)
            
            if "error" in data:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {data['error']}")
                del self.active_analyses[user_id]
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–≤–∑–∞–∏–º–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            non_mutual = self.analyzer.find_non_mutual(data["followers"], data["following"])
            
            if not non_mutual:
                await update.message.reply_text("‚úÖ –í—Å–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∑–∞–∏–º–Ω—ã–µ!")
                del self.active_analyses[user_id]
                return
            
            await self.send_analysis_results(update, non_mutual, len(data["followers"]), len(data["following"]))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            if user_id in self.active_analyses:
                del self.active_analyses[user_id]
    
    async def send_analysis_results(self, update: Update, non_mutual: List[InstagramUser], followers_count: int, following_count: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        # –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        summary = f"""
üéâ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {followers_count}
üì§ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {following_count}
‚ùå –ù–µ–≤–∑–∞–∏–º–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(non_mutual)}

üéØ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–≤–∑–∞–∏–º–Ω—ã—Ö:**
        """
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º
        micro = [u for u in non_mutual if u.followers_count < 1000]
        regular = [u for u in non_mutual if 1000 <= u.followers_count < 10000]
        medium = [u for u in non_mutual if 10000 <= u.followers_count < 100000]
        celebrities = [u for u in non_mutual if u.followers_count >= 100000]
        
        summary += f"""
üîπ –ú–∏–∫—Ä–æ-–±–ª–æ–≥–≥–µ—Ä—ã (<1k): {len(micro)}
üë§ –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (1k-10k): {len(regular)}
üåü –°—Ä–µ–¥–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã (10k-100k): {len(medium)}
‚≠ê –ó–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏ (100k+): {len(celebrities)}
        """
        
        await update.message.reply_text(summary, parse_mode='Markdown')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Ä—Ü–∏—è–º–∏
        chunk_size = 8
        
        for i in range(0, len(non_mutual), chunk_size):
            chunk = non_mutual[i:i + chunk_size]
            
            message_text = f"üìã **–ù–µ–≤–∑–∞–∏–º–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ ({i+1}-{min(i+chunk_size, len(non_mutual))} –∏–∑ {len(non_mutual)}):**\n\n"
            
            keyboard = []
            
            for user in chunk:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É
                if user.followers_count >= 100000:
                    icon = "‚≠ê"
                elif user.followers_count >= 10000:
                    icon = "üåü"
                elif user.followers_count >= 1000:
                    icon = "üë§"
                else:
                    icon = "üîπ"
                
                verified = "‚úÖ" if user.is_verified else ""
                private = "üîí" if user.is_private else ""
                
                message_text += f"{icon} **[{user.full_name}](https://instagram.com/{user.username})** {verified}{private}\n"
                message_text += f"   @{user.username} ‚Ä¢ {user.followers_count:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ñ–æ—Ç–æ
                keyboard.append([
                    InlineKeyboardButton(
                        f"üì∑ {user.username[:15]}{'...' if len(user.username) > 15 else ''}", 
                        callback_data=f"photo_{user.username}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message_text,
                parse_mode='Markdown',
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
            
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
    
    async def check_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        user_id = update.effective_user.id
        
        if user_id not in self.active_analyses:
            await update.message.reply_text("üìä –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤")
            return
        
        analysis = self.active_analyses[user_id]
        elapsed = datetime.now() - analysis["start_time"]
        
        status_message = f"""
‚è≥ **–°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞:**

üë§ –ü—Ä–æ—Ñ–∏–ª—å: @{analysis["username"]}
‚è∞ –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed.total_seconds() / 60:.1f} –º–∏–Ω—É—Ç

üîÑ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏...
–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
        """
        
        await update.message.reply_text(status_message, parse_mode='Markdown')
    
    async def get_profile_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ"""
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ username: /profile @username")
            return
        
        username = context.args[0]
        
        profile = await self.analyzer.get_profile_info(username)
        
        if not profile:
            await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        message = f"""
üì± **–ü—Ä–æ—Ñ–∏–ª—å Instagram**

üë§ **–ò–º—è:** {profile.full_name}
üîó **Username:** @{profile.username}
üë• **–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:** {profile.followers_count:,}
‚úÖ **–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:** {'–î–∞' if profile.is_verified else '–ù–µ—Ç'}
üîí **–ü—Ä–∏–≤–∞—Ç–Ω—ã–π:** {'–î–∞' if profile.is_private else '–ù–µ—Ç'}

üîó [–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å](https://instagram.com/{profile.username})
        """
        
        keyboard = [[
            InlineKeyboardButton("üì∑ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"photo_{profile.username}")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
    
    async def show_profile_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        query = update.callback_query
        await query.answer()
        
        username = query.data.replace("photo_", "")
        
        try:
            profile = await self.analyzer.get_profile_info(username)
            
            if not profile:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ")
                return
            
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=profile.profile_pic_url,
                caption=f"üì∑ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è @{profile.username}\nüîó https://instagram.com/{profile.username}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("analyze", self.analyze_profile))
        self.application.add_handler(CommandHandler("profile", self.get_profile_info))
        self.application.add_handler(CommandHandler("status", self.check_status))
        self.application.add_handler(CallbackQueryHandler(self.show_profile_photo, pattern="^photo_"))
        
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        logger.info("Bot started successfully")
        self.application.run_polling()

if __name__ == "__main__":
    BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
    
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN")
        exit(1)
    
    try:
        bot = TelegramBot(BOT_TOKEN)
        bot.run()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")